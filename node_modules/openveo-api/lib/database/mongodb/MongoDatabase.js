"use scrict"

// Module dependencies
var util = require("util");
var mongodb = require("mongodb");
var Database = require("../../Database.js");
var MongoClient = mongodb.MongoClient;

/**
 * Creates a MongoDatabase instance.
 * @param Object databaseConf A database configuration object like
 * {
 *   "type" : "mongodb",
 *   "host" : "localhost",
 *   "port" : 27017,
 *   "database" : "openveo",
 *   "username" : "openveo",
 *   "password" : "openveo"
 * }
 */
function MongoDatabase(databaseConf){
  Database.call(this, databaseConf);
}

module.exports = MongoDatabase;
util.inherits(MongoDatabase, Database);

/**
 * Establishes connection to the database.
 * @param Function callback The function to call when connection to the
 * database is done
 *   - Error The error if an error occurred, null otherwise 
 */
MongoDatabase.prototype.connect = function(callback){
  var self = this;
  
  var connectionUrl = "mongodb://" + this.conf.username + ":" + this.conf.username + "@" + this.conf.host + ":" + this.conf.port + "/" + this.conf.database;
  var mongoClient = MongoClient.connect(connectionUrl, function(error, db){
    
    // Connection failed
    if(error)
      callback(error);
    
    // Connection succeeded
    else{
      self.db = db;
      callback();
    }
  });
 
};

/**
 * Inserts a document into a collection.
 * @param String collection The collection to work on
 * @param Objet data The document to insert into the collection
 * @param Function callback The function to call when insertion is done
 *   - Error The error if an error occurred, null otherwise 
 */
MongoDatabase.prototype.insert = function(collection, data, callback){
  var collection = this.db.collection(collection);
  collection.insert(data, callback);
};

/**
 * Updates a document.
 * @param String collection The collection to work on
 * @param Object criteria The update criteria
 * @param Object data Data to update
 * @param Function callback The function to call when update is done
 *   - Error The error if an error occurred, null otherwise 
 */
MongoDatabase.prototype.update = function(collection, criteria, data, callback){
  var collection = this.db.collection(collection);  
  collection.update(criteria, {$set : data}, callback);
};

/**
 * Gets a document.
 * @param String collection The collection to work on
 * @param Object criteria The get criteria
 * @param Function callback The function to call when insertion is done
 *   - Error The error if an error occurred, null otherwise 
 *   - Array The retrieved data 
 */
MongoDatabase.prototype.get = function(collection, criteria, callback){
  var collection = this.db.collection(collection);
  collection.find(criteria).toArray(callback);
};