"use strict"

/**
 * Saves database configuration.
 * @param Object databaseConf A database configuration object like
 * {
 *   "type" : "mongodb",
 *   "host" : "localhost",
 *   "port" : 27017,
 *   "database" : "openveo",
 *   "username" : "openveo",
 *   "password" : "***"
 * }
 */
function Database(databaseConf){
  this.conf = databaseConf;
  
  if(!this.conf)
    throw new Error("No database configuration");
}

module.exports = Database;

/**
 * Gets an instance of a Database using the given 
 * database configuration.
 * @param Object databaseConf A database configuration object like
 * {
 *   "type" : "mongodb",
 *   "host" : "localhost",
 *   "port" : 27017,
 *   "database" : "openveo",
 *   "username" : "openveo",
 *   "password" : "openveo"
 * }
 * @return Database A Database instance
 */
Database.getDatabase = function(databaseConf){
  
  if(databaseConf && databaseConf.type){
    
    switch(databaseConf.type){
        
      case "mongodb":
        var MongoDatabase = process.requireAPI("lib/database/mongodb/MongoDatabase.js");
        return new MongoDatabase(databaseConf);
      break;
        
      default: 
        throw new Error("Unknown database type");
    }
    
  }
  
};

/**
 * Establishes connection to the database.
 * @param Function callback The function to call when connection to the
 * database is done
 *   - Error The error if an error occurred, null otherwise 
 */
Database.prototype.connect = function(callback){throw new Error("connect method not implemented for this database");}

/**
 * Inserts a document into a collection.
 * @param String collection The collection to work on
 * @param Objet data The document to insert into the collection
 * @param Function callback The function to call when insertion is done
 *   - Error The error if an error occurred, null otherwise 
 */
Database.prototype.insert = function(collection, data, callback){throw new Error("insert method not implemented for this database");}

/**
 * Updates a document.
 * @param String collection The collection to work on
 * @param Object criteria The update criteria
 * @param Object data Data to update
 * @param Function callback The function to call when insertion is done
 *   - Error The error if an error occurred, null otherwise 
 */
Database.prototype.update = function(collection, criteria, data, callback){throw new Error("update method not implemented for this database");}

/**
 * Gets a document.
 * @param String collection The collection to work on
 * @param Object criteria The get criteria
 * @param Function callback The function to call when insertion is done
 *   - Error The error if an error occurred, null otherwise 
 *   - Array The retrieved data 
 */
Database.prototype.get = function(collection, criteria, callback){throw new Error("get method not implemented for this database");}