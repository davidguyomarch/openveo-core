"use strict"

// The name of the video collection
var VIDEO_COLLECTION = "videos";

/**
 * Creates a VideoProvider to interact with database videos collection.
 * @param Database database The database to interact with
 */
function VideoProvider(database){
  this.database = database;
  this.pendingUpdateOperations;
  
  if(!this.database)
    throw new Error("VideoProvider needs a database");
}

module.exports = VideoProvider;

/**
 * Adds a new video into database.
 * @param Object videoPackage Information about the video
 *   {
 *     "id" : 1422731934859,
 *     "status" : "pending",
 *     "type" : "vimeo",
 *     "path" : "C:/Temp/",
 *     "originalPackagePath" : "C:/Temp/video-package.tar",
 *     "packagePath" : "E:/openveo/node_modules/openveo-publish/tmp/1422731934859.tar",
 *     "metadata" : {
 *       "profile": "2",
 *       "audio-input": "analog-top",
 *       "date": "13/01/1970 20:36:15",
 *       "format": "mix-pip",
 *       "rich-media": true,
 *       "profile-settings": {
 *         "video-bitrate": 1000000,
 *         "id": "2",
 *         "video-height": 720,
 *         "audio-bitrate": 128000,
 *         "name": "Haute définition"
 *       },
 *       "id": "1970-01-13_20-36-15",
 *       "format-settings": {
 *         "source": "mix-raw",
 *         "id": "mix-pip",
 *         "name": "Mélangé caméra incrustée",
 *         "template": "pip"
 *       },
 *       "date-epoch": 1107375,
 *       "storage-directory": "/data/1970-01-13_20-36-15",
 *       "filename": "video.mp4",
 *       "duration": 20
 *     }
 *   }
 * @param Function/null callback The function to call when done
 *   - Error The error if an error occurred, null otherwise 
 */
VideoProvider.prototype.add = function(videoPackage, callback){
  this.database.insert(VIDEO_COLLECTION, {
    id : videoPackage.id, 
    status : videoPackage.status,
    metadata : videoPackage.metadata,
    url : videoPackage.url,
    type : videoPackage.type,
    errorCode : videoPackage.errorCode
  }, function(error){
    if(callback)
      callback(error);
  });
};

/**
 * Updates video state by its id.
 * @param Number videoId The id of the video to update
 * @param String state The state of the video
 * @param Function/null callback The function to call when done
 *   - Error The error if an error occurred, null otherwise
 */
VideoProvider.prototype.updateState = function(videoId, state, callback){
  updateVideoProperty.call(this, videoId, "state", state, callback);
};

/**
 * Updates video status by its id.
 * @param Number videoId The id of the video to update
 * @param String status The status of the video
 * @param Function/null callback The function to call when done
 *   - Error The error if an error occurred, null otherwise
 */
VideoProvider.prototype.updateStatus = function(videoId, status, callback){
  updateVideoProperty.call(this, videoId, "status", status, callback);
};

/**
 * Updates video link.
 * @param Number videoId The id of the video to update
 * @param String link The link of the video
 * @param Function/null callback The function to call when done
 *   - Error The error if an error occurred, null otherwise
 */
VideoProvider.prototype.updateLink = function(videoId, link, callback){
  updateVideoProperty.call(this, videoId, "link", link, callback);
};

/**
 * Updates video id in video platform.
 * @param String videoId The id of the video to update
 * @param String id The id of the video in the video platform
 * @param Function/null callback The function to call when done
 *   - Error The error if an error occurred, null otherwise
 */
VideoProvider.prototype.updateVideoId = function(videoId, id, callback){
  updateVideoProperty.call(this, videoId, "videoId", id, callback);
};

/**
 * Updates video metadata in video platform.
 * @param Number videoId The id of the video to update
 * @param String metadata The metadata of the video in the video platform
 * @param Function/null callback The function to call when done
 *   - Error The error if an error occurred, null otherwise
 */
VideoProvider.prototype.updateMetadata = function(videoId, metadata, callback){
  updateVideoProperty.call(this, videoId, "metadata", metadata, callback);
};

/**
 * Gets the list of videos.
 * @param Function callback The function to call when done
 *   - Error The error if an error occurred, null otherwise
 *   - Array The list of videos as objects
 */
VideoProvider.prototype.getVideos = function(callback){
  this.database.get(VIDEO_COLLECTION, null, callback);
};

/**
 * Gets a video by its id.
 * @param String id The id of the video
 * @param Function callback The function to call when done
 *   - Error The error if an error occurred, null otherwise
 *   - Object The requested video object
 */
VideoProvider.prototype.getVideo = function(videoId, callback){
  this.database.get(VIDEO_COLLECTION, { id : parseInt(videoId)}, function(error, videos){
    if(videos && videos.length)
      callback(error, videos[0]);
    else
      callback(error);
  });
};

/**
 * Updates the property of a given video.
 * Update operations are group by event loop and only one request 
 * is made to the database for each video id.
 * @param Number videoId The id of the video to update
 * @param String propertyName The name of the property to update
 * @param PrimitiveValue propertyValue The value of the property 
 */
function updateVideoProperty(videoId, propertyName, propertyValue, callback){
  var self = this;
  
  // No pending update operations for now
  if(!this.pendingUpdateOperations){
    this.pendingUpdateOperations = {};
    
    process.nextTick(function(){
      for(var videoId in self.pendingUpdateOperations){
        self.database.update(VIDEO_COLLECTION, {
            id : parseInt(videoId)
          }, self.pendingUpdateOperations[videoId], function(error){
            if(callback)
              callback(error);
        });
      }
      self.pendingUpdateOperations = null;
    });
  }
  
  // Add update opration to pending operations
  if(!this.pendingUpdateOperations[videoId])
    this.pendingUpdateOperations[videoId] = {};

  this.pendingUpdateOperations[videoId][propertyName] = propertyValue;
}

/**
 * Updates a list of properties for the given video.
 *
 * e.g.
 * updateVideoProperties("13545", {
 *   "link" : "/publish/video/13545",
 *   "errorCode" : 2
 * });
 *
 * @param Number videoId The id of the video to update
 * @param Object properties A key value of properties to update
 * @param Function/null callback The function to call when done
 *   - Error The error if an error occurred, null otherwise 
 */
function updateVideoProperties(videoId, properties, callback){
  if(properties && typeof properties === "object"){ 
    this.database.update(VIDEO_COLLECTION, {
      id : videoId
    },properties, function(error){
      if(callback)
        callback(error);
    });
  }
}