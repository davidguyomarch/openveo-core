"use scrict"

// The name of the properties collection
var PROPERTIES_COLLECTION = "properties";

/**
 * Creates a PropertyProvider to interact with database 
 * property collection.
 * @param Database database The database to interact with
 */
function PropertyProvider(database){
  this.database = database;
  
  if(!this.database)
    throw new Error("PropertyProvider needs a database");
}

module.exports = PropertyProvider;

/**
 * Gets the list of properties.
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 *   - Object The list of properties
 */
PropertyProvider.prototype.getProperties = function(callback){
  this.database.get(PROPERTIES_COLLECTION, null, null, -1, function(error, properties){
    if(properties)
      callback(error, properties);
    else
      callback(error);
  });
};

/**
 * Adds a new property to the properties collection.
 * @param Object property A property object
 * e.g.
 * {
 *   "name" : "Name of the property",
 *   "description" : "Description of the property",
 *   "type" : "Type of the property"
 * }
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 */
PropertyProvider.prototype.addProperty = function(property, callback){
  this.database.insert(PROPERTIES_COLLECTION, property, callback);
};

/**
 * Updates property information.
 * @param String id The id of the property
 * @param Object property The property with all fields or not
 * e.g.
 * {
 *   "name" : "New property name"
 * }
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 */
PropertyProvider.prototype.updateProperty = function(id, property, callback){
  this.database.update(PROPERTIES_COLLECTION, {id : parseInt(id)}, property, callback);
};

/**
 * Removes a property by its id.
 * @param String id The id of the property
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 */
PropertyProvider.prototype.removeProperty = function(id, callback){
  this.database.remove(PROPERTIES_COLLECTION, {id : parseInt(id)}, callback);
};