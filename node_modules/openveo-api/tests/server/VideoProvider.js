"use strict"

var path = require("path");
var assert = require("chai").assert;

// Set module root directory
process.rootAPI = path.join(__dirname, "../../");
process.requireAPI = function(filePath){
  return require(path.normalize(process.rootAPI + "/" + filePath));
};

var VideoProvider = process.requireAPI("lib/providers/VideoProvider");
var FakeDatabase = require("./database/FakeDatabase.js");
var videoProvider = new VideoProvider(new FakeDatabase());
var counter = 0;

describe("VideoProvider", function(){
  
  describe("add", function(){

    it("should be able to insert a video document into database", function(done){
      videoProvider.add({
        id : "id", 
        status : "status",
        metadata : {},
        url : "url",
        type : "type",
        errorCode : 0
      }, function(testData){
        assert.equal(testData.data["id"], "id");
        assert.equal(testData.data["status"], "status");
        assert.equal(testData.data["url"], "url");
        assert.equal(testData.data["type"], "type");
        assert.equal(testData.data["errorCode"], 0);
        assert.isDefined(testData.data["metadata"]);
        assert.isUndefined(testData.data["published"]);
        assert.isUndefined(testData.data["properties"]);
        done();
      });

    });
    
  });
  
  describe("update", function(){

    it("should be able to queue update requests on the same loop", function(done){

      function increment(){
        counter++; 
      }

      videoProvider.updateStatus("id", "status", function(error){
        counter++;
        assert.equal(counter, 1);
        done();
      });
      videoProvider.updateState("id", "state", increment);
      videoProvider.updateLink("id", "link", increment);
      videoProvider.updateVideoId("id", "videoId", increment);
    });

  });

  describe("remove", function(){

    it("should be able to remove a video from database", function(done){
      videoProvider.removeVideo("25", function(testData){
        assert.equal(testData.criteria.id, 25);
        done();
      });
    });

  });

  describe("updateVideo", function(){

    it("should be able to update video information into database", function(done){
      videoProvider.updateVideo("25", { title : "title" }, function(testData){
        assert.equal(testData.criteria.id, 25);
        assert.equal(testData.data.title, "title");
        done();
      });
    });

  });

  describe("publishVideo", function(){

    it("should be able to publish a video in sent state", function(done){
      videoProvider.publishVideo("25", function(testData){
        assert.equal(testData.criteria.id, 25);
        assert.equal(testData.criteria.state, VideoProvider.SENT_STATE);
        assert.equal(testData.data.state, VideoProvider.PUBLISHED_STATE);
        done();
      });
    }); 
    
  });

});