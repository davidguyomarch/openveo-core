"use strict"

var path = require("path");
var assert = require("chai").assert;

// Set module root directory
process.rootAPI = path.join(__dirname, "../../");
process.requireAPI = function(filePath){
  return require(path.normalize(process.rootAPI + "/" + filePath));
};

describe("VideoProvider", function(){
  
  var videoProvider, counter;
  
  beforeEach(function(){
    var VideoProvider = process.requireAPI("lib/providers/VideoProvider");
    var FakeVideoDatabase = require("./database/FakeVideoDatabase.js");
    videoProvider = new VideoProvider(new FakeVideoDatabase());
    counter = 0;    
  });
  
  describe("add", function(){

    it("Should be able to insert a video document into database", function(done){
      videoProvider.add({
        id : "1", 
        status : "status",
        metadata : {},
        url : "url",
        type : "type",
        errorCode : 0
      }, function(error){
        assert.isUndefined(error);
        done();
      });

    });
    
  });
  
  describe("update", function(){

    it("Should be able to queue update requests on the same loop", function(done){

      function increment(){
        counter++; 
      }

      videoProvider.updateStatus("1", "status", function(error){
        counter++;
        assert.equal(counter, 1);
        done();
      });
      videoProvider.updateState("1", "state", increment);
      videoProvider.updateLink("1", "link", increment);
      videoProvider.updateVideoId("1", "videoId", increment);
    });

  });

  describe("remove", function(){

    it("Should be able to remove a video from database", function(done){
      videoProvider.removeVideo(1, function(error){
        assert.isUndefined(error);
        done();
      });
    });

  });

  describe("updateVideo", function(){

    it("Should be able to update video information into database", function(done){
      videoProvider.updateVideo(1, { title : "title" }, function(error){
        assert.isUndefined(error);
        done();
      });
    });

  });

  describe("publishVideo", function(){

    it("Should be able to publish a video in sent state", function(done){
      videoProvider.publishVideo(1, function(error){
        assert.isUndefined(error);
        done();
      });
    }); 
    
  });

});